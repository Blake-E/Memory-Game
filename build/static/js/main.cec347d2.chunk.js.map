{"version":3,"sources":["Components/Navbar.js","Components/FriendCard.js","Components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","style","paddingRight","currentScore","paddingLeft","topScore","FriendCard","onClick","handleItemClick","id","alt","src","image","Wrapper","children","note","App","state","data","handleClick","console","log","_this","teamClicked","filter","team","clicked","i","length","setState","sort","b","Math","random","_this2","this","Components_Wrapper","Components_Navbar","map","Components_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAYeA,EAVA,SAAAC,GACX,OAAOC,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACVH,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACC,aAAc,SAA1B,kBAAmDN,EAAMO,cAC/DN,EAAAC,EAAAC,cAAA,MAAIE,MAAO,CAACG,YAAa,SAAzB,cAA8CR,EAAMS,aCM3CC,EAXI,SAAAV,GACf,OAEIC,EAAAC,EAAAC,cAAA,OAAKQ,QAAS,kBAAKX,EAAMY,gBAAgBZ,EAAMa,MAE3CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKd,EAAMa,GAAIE,IAAKf,EAAMgB,UCD5BC,MAJf,SAAiBjB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMkB,kBCIrCC,EAAO,GAoEIC,6MAjEbC,MAAQ,CACNC,OACAf,aAAc,EACdE,SAAU,EACVU,UAGFI,YAAc,SAAAV,GACZW,QAAQC,IAAIZ,MAGdD,gBAAkB,SAAAC,GAChB,IAAMS,EAAOI,EAAKL,MAAMC,KAClBK,EAAcL,EAAKM,OAAO,SAAAC,GAAI,OAAIA,EAAKhB,KAAOA,IAEpD,GAAIc,EAAY,GAAGG,QAAS,CAC1BX,EAAO,0CAEP,IAAK,IAAIY,EAAI,EAAGA,EAAIT,EAAKU,OAAQD,IAC/BT,EAAKS,GAAGD,SAAU,EAEpBJ,EAAKO,SAAS,CAACd,SACfO,EAAKO,SAAS,CAAC1B,4BACfmB,EAAKO,SAAS,CAACX,cAEfK,EAAY,GAAGG,SAAU,EACzBvB,cAA8B,EAC9BY,EAAO,YAEHZ,aAAeE,WACjBA,SAAWF,aACXmB,EAAKO,SAAS,CAACxB,qBAGjBa,EAAKY,KAAK,SAAChC,EAAGiC,GACZ,MAAO,GAAMC,KAAKC,WAEpBX,EAAKO,SAAS,CAACX,SACfI,EAAKO,SAAS,CAAC1B,4BACfmB,EAAKO,SAAS,CAACd,kFAIV,IAAAmB,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,CACAlC,aAAcgC,KAAKlB,MAAMd,aACzBE,SAAW8B,KAAKlB,MAAMZ,WACrB8B,KAAKlB,MAAMC,KAAKoB,IAAI,SAAAb,GAAI,OACvB5B,EAAAC,EAAAC,cAACwC,EAAD,CACAC,IAAOf,EAAKhB,GACZA,GAAMgB,EAAKhB,GACXG,MAASa,EAAKb,MACdJ,gBAAmB0B,EAAKf,yBAxDhBsB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cec347d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = props=> {\r\n    return(<div>\r\n        <h1>Football Memory Game</h1>\r\n        <ul className='right'>\r\n            <li style={{paddingRight: \"25px\"}}>Current Score: {props.currentScore}</li>\r\n\t\t    <li style={{paddingLeft: \"25px\"}}>Top Score: {props.topScore}</li>\r\n        </ul>\r\n    </div>)\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst FriendCard = props => {\r\n    return (\r\n\r\n        <div onClick={()=> props.handleItemClick(props.id)}>\r\n\r\n            <img alt={props.id} src={props.image} />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","/* eslint-disable no-undef */\nimport React, { Component } from 'react';\nimport Navbar from './Components/Navbar';\nimport FriendCard from './Components/FriendCard';\nimport Wrapper from './Components/Wrapper';\nimport data from './teams.json';\n\nlet note = \"\";\n\nclass App extends Component {\n  state = {\n    data,\n    currentScore: 0,\n    topScore: 0,\n    note\n  }\n\n  handleClick = id => {\n    console.log(id)\n  }\n\n  handleItemClick = id => {\n    const data = this.state.data;\n    const teamClicked = data.filter(team => team.id === id);\n\n    if (teamClicked[0].clicked) {\n      note = 'Oh No. You clicked that twice.  Restart';\n      \n      for (let i = 0; i < data.length; i ++){\n        data[i].clicked = false;\n      }\n      this.setState({note});\n      this.setState({currentScore});\n      this.setState({data});\n    }else{\n      teamClicked[0].clicked = true;\n      currentScore = currentScore + 4;\n      note = 'Great Job';\n\n      if (currentScore > topScore) {\n        topScore = currentScore;\n        this.setState({topScore});\n      }\n\n      data.sort((a, b) => {\n        return 0.5 - Math.random();\n      });\n      this.setState({data});\n      this.setState({currentScore});\n      this.setState({note})\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Wrapper>\n        <Navbar \n        currentScore={this.state.currentScore} \n        topScore= {this.state.topScore} />\n        {this.state.data.map(team => (\n          <FriendCard \n          key = {team.id}\n          id = {team.id}\n          image = {team.image}\n          handleItemClick = {this.handleClick}\n\n          />\n        ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}